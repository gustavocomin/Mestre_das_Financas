// <auto-generated />
using System;
using MF.Repository.Configurations.Db;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MF.Repository.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230518015736_AjusteDb")]
    partial class AjusteDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseSerialColumns(modelBuilder);

            modelBuilder.Entity("MF.Domain.Commons.Consumirdores.Consumidor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("IdConsumidor");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<string>("Celular")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)");

                    b.Property<DateTime>("DataAlteracao")
                        .HasColumnType("TIMESTAMP");

                    b.Property<DateTime?>("DataNascimento")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("RendaTotal")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Consumidor", (string)null);
                });

            modelBuilder.Entity("MF.Domain.Commons.Empresas.Empresa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("IdEmpresa");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<string>("Bairro")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Cidade")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CnpjEmpresa")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("Complemento")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Endereço")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("NomeEmpresa")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("EMPRESA", (string)null);
                });

            modelBuilder.Entity("MF.Domain.Commons.ModalidadePagto.CondPagtos.CondPagto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("IdCondPagto");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<bool>("Credito")
                        .HasColumnType("boolean");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar");

                    b.Property<int>("QuantParc")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CONDPAGTO", (string)null);
                });

            modelBuilder.Entity("MF.Domain.Commons.ModalidadePagto.CondPagtos.Parcs.CondPagtoParcs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("IdCondPagtoParcs");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<int>("CodigoCondPagto")
                        .HasColumnType("int");

                    b.Property<int>("CodigoOrigem")
                        .HasColumnType("int");

                    b.Property<int>("Origem")
                        .HasColumnType("int");

                    b.Property<int>("SeqParc")
                        .HasColumnType("int");

                    b.Property<decimal>("ValorParc")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CodigoCondPagto");

                    b.ToTable("CONDPAGTOPARC", (string)null);
                });

            modelBuilder.Entity("MF.Domain.Commons.ModalidadePagto.FormaPagtos.FormaPagto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("IdFormaPagto");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    b.ToTable("FORMAPAGTO", (string)null);
                });

            modelBuilder.Entity("MF.Domain.Commons.Usuarios.Email.EmailProvider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("IdEmailProvider");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataAlteracao")
                        .HasColumnType("TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("UsuarioAlteracao")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("EmailProvider", (string)null);
                });

            modelBuilder.Entity("MF.Domain.Commons.Usuarios.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("IdUsuario");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataAlteracao")
                        .HasColumnType("TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.HasKey("Id");

                    b.ToTable("Usuario", (string)null);
                });

            modelBuilder.Entity("MF.Domain.ControleMensal.Despesas.Despesa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("IdDespesa");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<int>("CodigoCondPagto")
                        .HasColumnType("int");

                    b.Property<int>("CodigoConsumidor")
                        .HasColumnType("int");

                    b.Property<int?>("CodigoEmpresa")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("CodigoFormaPagto")
                        .HasColumnType("int");

                    b.Property<int?>("ConsumidorId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DataAlteracao")
                        .HasColumnType("TIMESTAMP");

                    b.Property<DateTime>("DataDespesa")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DataFinal")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DataInicial")
                        .HasColumnType("date");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.Property<bool>("Mensal")
                        .HasColumnType("boolean");

                    b.Property<int>("TipoDespesa")
                        .HasColumnType("integer");

                    b.Property<decimal>("Valor")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CodigoCondPagto");

                    b.HasIndex("CodigoConsumidor");

                    b.HasIndex("CodigoEmpresa");

                    b.HasIndex("CodigoFormaPagto");

                    b.HasIndex("ConsumidorId");

                    b.ToTable("DESPESA", (string)null);
                });

            modelBuilder.Entity("MF.Domain.ControleMensal.Mercado.Compras.Compra", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("IdCompra");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<string>("CCF")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("COO")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<int?>("CodigoCondPagto")
                        .HasColumnType("int");

                    b.Property<int?>("CodigoEmpresa")
                        .HasColumnType("int");

                    b.Property<int?>("CodigoFormaPagto")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataCompra")
                        .HasColumnType("date");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("LinkNF")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NumeroNF")
                        .IsRequired()
                        .HasColumnType("VARCHAR");

                    b.Property<decimal>("ValorTotal")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("ValorTotalDescontos")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("ValorTotalItens")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("ValorTotalNF")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("ValorTributos")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("CodigoCondPagto");

                    b.HasIndex("CodigoEmpresa");

                    b.HasIndex("CodigoFormaPagto");

                    b.ToTable("COMPRA", (string)null);
                });

            modelBuilder.Entity("MF.Domain.ControleMensal.Mercado.Compras.Itens.Desconto.DescontoItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("IdDescontoItem");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<int>("CodigoItemCompra")
                        .HasColumnType("int");

                    b.Property<decimal>("ValorDesconto")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CodigoItemCompra")
                        .IsUnique();

                    b.ToTable("DESCONTOITEM", (string)null);
                });

            modelBuilder.Entity("MF.Domain.ControleMensal.Mercado.Compras.Itens.ItemCompra", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("IdItemCompra");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<int>("CodigoCompra")
                        .HasColumnType("INT");

                    b.Property<int?>("CodigoDesconto")
                        .HasColumnType("INT");

                    b.Property<DateTime>("DataAlteracao")
                        .HasColumnType("TIMESTAMP");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<decimal>("Quantidade")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SequencialItem")
                        .HasColumnType("INT");

                    b.Property<int>("UnidadeCompra")
                        .HasColumnType("integer");

                    b.Property<decimal>("ValorTotalItem")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ValorUnitario")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CodigoCompra");

                    b.ToTable("ITEMCOMPRA", (string)null);
                });

            modelBuilder.Entity("MF.Domain.ControleMensal.Mercado.Itens.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("IdItem");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.ToTable("ITEM", (string)null);
                });

            modelBuilder.Entity("MF.Domain.ControleMensal.Mercado.Itens.MarcaItens.MarcaItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<int>("CodigoItem")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DataAlteracao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CodigoItem");

                    b.ToTable("MarcaItem");
                });

            modelBuilder.Entity("MF.Domain.ControleMensal.Mercado.Itens.MarcaItens.Models.MarcaItemView", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("IdMarcaItemView");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<int>("CodigoItem")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataAlteracao")
                        .HasColumnType("TIMESTAMP");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("ItemViewId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CodigoItem");

                    b.HasIndex("ItemViewId");

                    b.ToTable("MARCAITEM", (string)null);
                });

            modelBuilder.Entity("MF.Domain.ControleMensal.Mercado.Itens.Models.ItemView", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ItemView");
                });

            modelBuilder.Entity("MF.Domain.ControleMensal.Rendas.Renda", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("IdRenda");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<int?>("CodigoConsumidor")
                        .HasColumnType("integer")
                        .HasColumnName("CodigoConsumidor");

                    b.Property<int?>("CodigoEmpresa")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DataAlteracao")
                        .HasColumnType("TIMESTAMP");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("Salario")
                        .HasColumnType("boolean");

                    b.Property<decimal>("Valor")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CodigoConsumidor");

                    b.HasIndex("CodigoEmpresa");

                    b.ToTable("RENDA", (string)null);
                });

            modelBuilder.Entity("MF.Domain.Planejamento.Itens.MetaItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("IdMetaItem");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<int>("CodigoMeta")
                        .HasColumnType("INT");

                    b.Property<DateTime>("DataAlteracao")
                        .HasColumnType("TIMESTAMP");

                    b.Property<DateTime>("DataExpectativaAquisicao")
                        .HasColumnType("date");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar");

                    b.Property<decimal>("DiferencaCompraReserva")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("LinkCompra")
                        .HasMaxLength(900)
                        .HasColumnType("varchar");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<decimal>("ValorCompra")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ValorGuardarMes")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ValorReservaCompra")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CodigoMeta");

                    b.ToTable("METAITEM", (string)null);
                });

            modelBuilder.Entity("MF.Domain.Planejamento.Meta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("IdMeta");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<int>("CodigoConsumidor")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DataAlteracao")
                        .HasColumnType("TIMESTAMP");

                    b.Property<DateTime?>("DataFimVigencia")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DataIniVigencia")
                        .HasColumnType("date");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<decimal>("ValorTotalCompra")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ValorTotalGuardado")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CodigoConsumidor");

                    b.ToTable("META", (string)null);
                });

            modelBuilder.Entity("MF.Domain.Commons.ModalidadePagto.CondPagtos.Parcs.CondPagtoParcs", b =>
                {
                    b.HasOne("MF.Domain.Commons.ModalidadePagto.CondPagtos.CondPagto", null)
                        .WithMany("Parcs")
                        .HasForeignKey("CodigoCondPagto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MF.Domain.ControleMensal.Despesas.Despesa", b =>
                {
                    b.HasOne("MF.Domain.Commons.ModalidadePagto.CondPagtos.CondPagto", "CondPagto")
                        .WithMany()
                        .HasForeignKey("CodigoCondPagto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MF.Domain.Commons.Consumirdores.Consumidor", "Consumidor")
                        .WithMany()
                        .HasForeignKey("CodigoConsumidor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MF.Domain.Commons.Empresas.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("CodigoEmpresa")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MF.Domain.Commons.ModalidadePagto.FormaPagtos.FormaPagto", "FormaPagto")
                        .WithMany()
                        .HasForeignKey("CodigoFormaPagto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MF.Domain.Commons.Consumirdores.Consumidor", null)
                        .WithMany("Despesas")
                        .HasForeignKey("ConsumidorId");

                    b.Navigation("CondPagto");

                    b.Navigation("Consumidor");

                    b.Navigation("Empresa");

                    b.Navigation("FormaPagto");
                });

            modelBuilder.Entity("MF.Domain.ControleMensal.Mercado.Compras.Compra", b =>
                {
                    b.HasOne("MF.Domain.Commons.ModalidadePagto.CondPagtos.CondPagto", "CondPagto")
                        .WithMany()
                        .HasForeignKey("CodigoCondPagto");

                    b.HasOne("MF.Domain.Commons.Empresas.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("CodigoEmpresa");

                    b.HasOne("MF.Domain.Commons.ModalidadePagto.FormaPagtos.FormaPagto", "FormaPagto")
                        .WithMany()
                        .HasForeignKey("CodigoFormaPagto");

                    b.Navigation("CondPagto");

                    b.Navigation("Empresa");

                    b.Navigation("FormaPagto");
                });

            modelBuilder.Entity("MF.Domain.ControleMensal.Mercado.Compras.Itens.Desconto.DescontoItem", b =>
                {
                    b.HasOne("MF.Domain.ControleMensal.Mercado.Compras.Itens.ItemCompra", "ItemCompra")
                        .WithOne("DescontoItem")
                        .HasForeignKey("MF.Domain.ControleMensal.Mercado.Compras.Itens.Desconto.DescontoItem", "CodigoItemCompra")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ItemCompra");
                });

            modelBuilder.Entity("MF.Domain.ControleMensal.Mercado.Compras.Itens.ItemCompra", b =>
                {
                    b.HasOne("MF.Domain.ControleMensal.Mercado.Compras.Compra", "Compra")
                        .WithMany("Itens")
                        .HasForeignKey("CodigoCompra")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Compra");
                });

            modelBuilder.Entity("MF.Domain.ControleMensal.Mercado.Itens.MarcaItens.MarcaItem", b =>
                {
                    b.HasOne("MF.Domain.ControleMensal.Mercado.Itens.Item", "Item")
                        .WithMany("MarcaItens")
                        .HasForeignKey("CodigoItem")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("MF.Domain.ControleMensal.Mercado.Itens.MarcaItens.Models.MarcaItemView", b =>
                {
                    b.HasOne("MF.Domain.ControleMensal.Mercado.Itens.Models.ItemView", "Item")
                        .WithMany()
                        .HasForeignKey("CodigoItem")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MF.Domain.ControleMensal.Mercado.Itens.Models.ItemView", null)
                        .WithMany("MarcaItens")
                        .HasForeignKey("ItemViewId");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("MF.Domain.ControleMensal.Rendas.Renda", b =>
                {
                    b.HasOne("MF.Domain.Commons.Consumirdores.Consumidor", "Consumidor")
                        .WithMany("Rendas")
                        .HasForeignKey("CodigoConsumidor")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_DESPESA_CONSUMIDOR");

                    b.HasOne("MF.Domain.Commons.Empresas.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("CodigoEmpresa")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Consumidor");

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("MF.Domain.Planejamento.Itens.MetaItem", b =>
                {
                    b.HasOne("MF.Domain.Planejamento.Meta", "Meta")
                        .WithMany("Itens")
                        .HasForeignKey("CodigoMeta")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meta");
                });

            modelBuilder.Entity("MF.Domain.Planejamento.Meta", b =>
                {
                    b.HasOne("MF.Domain.Commons.Consumirdores.Consumidor", "Consumidor")
                        .WithMany()
                        .HasForeignKey("CodigoConsumidor")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Consumidor");
                });

            modelBuilder.Entity("MF.Domain.Commons.Consumirdores.Consumidor", b =>
                {
                    b.Navigation("Despesas");

                    b.Navigation("Rendas");
                });

            modelBuilder.Entity("MF.Domain.Commons.ModalidadePagto.CondPagtos.CondPagto", b =>
                {
                    b.Navigation("Parcs");
                });

            modelBuilder.Entity("MF.Domain.ControleMensal.Mercado.Compras.Compra", b =>
                {
                    b.Navigation("Itens");
                });

            modelBuilder.Entity("MF.Domain.ControleMensal.Mercado.Compras.Itens.ItemCompra", b =>
                {
                    b.Navigation("DescontoItem");
                });

            modelBuilder.Entity("MF.Domain.ControleMensal.Mercado.Itens.Item", b =>
                {
                    b.Navigation("MarcaItens");
                });

            modelBuilder.Entity("MF.Domain.ControleMensal.Mercado.Itens.Models.ItemView", b =>
                {
                    b.Navigation("MarcaItens");
                });

            modelBuilder.Entity("MF.Domain.Planejamento.Meta", b =>
                {
                    b.Navigation("Itens");
                });
#pragma warning restore 612, 618
        }
    }
}
